<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:s="http://www.springframework.org/schema/security" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd"
	default-lazy-init="true">

	<description>SpringSecurity安全配置</description>

	<!-- http安全配置 -->
	<s:http auto-config="true" use-expressions="true"
		access-denied-page="/common/403.jsp">
		<s:intercept-url pattern="/resources/**" filters="none" />
		<!-- <s:intercept-url pattern="/services/**" filters="none" /> -->
		<s:intercept-url pattern="/dwz/**" filters="none" />
		<s:intercept-url pattern="/themes/**" filters="none" />
		<s:intercept-url pattern="/uploadify/**" filters="none" />
		<s:intercept-url pattern="/xheditor/**" filters="none" />

		<s:intercept-url pattern="/service/**" filters="none" />
		<s:intercept-url pattern="/login" filters="none" />
		<s:intercept-url pattern="/loginError" filters="none" />
		<!-- <s:intercept-url pattern="/**" access="permitAll" /> -->
		<s:intercept-url pattern="/*" access="isAuthenticated()" />
		
		<s:form-login login-page="/login" default-target-url="/"
			authentication-failure-url="/login?error=1" />
		<s:logout logout-success-url="/" />

		<s:remember-me key="e37f4b31-0c45-11dd-bd0b-0800200c9a66"
			token-validity-seconds="259200" />
		
		<s:session-management>
			<s:concurrency-control max-sessions="1"
				error-if-maximum-exceeded="false" />
		</s:session-management>
		
		<s:session-management session-fixation-protection="none"/> 
		

		<!-- 增加一个filter，这点与Acegi是不一样的，不能修改默认的filter了，这个filter位于FILTER_SECURITY_INTERCEPTOR之前 -->
		<s:custom-filter before="FILTER_SECURITY_INTERCEPTOR"
			ref="myFilter" />
	</s:http>

	<!-- 方法安全配置 -->
	<s:global-method-security secured-annotations="enabled" />

	<!-- 认证配置, 使用userDetailsService提供的用户信息 -->
	<s:authentication-manager alias="authenticationManager">
		<s:authentication-provider user-service-ref="userDetailsService">
			<s:password-encoder hash="md5">
				<s:salt-source user-property="username" />
			</s:password-encoder>
		</s:authentication-provider>
	</s:authentication-manager>

	<!-- 项目实现的用户查询服务 -->
	<bean id="userDetailsService"
		class="cn.com.educate.app.service.login.UserDetailsServiceImpl" />

	<!-- 一个自定义的filter，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性， 
		我们的所有控制将在这三个类中实现，解释详见具体配置 -->
	<bean id="myFilter"
		class="cn.com.educate.app.service.security.MyFilterSecurityInterceptor">
		<property name="exceptUrls">  
             <list>  
                 <value>/intercept/**</value> <!-- 设置不拦截URL -->
                 <value>/WEB-INF/content/intercept/**</value> <!-- 设置不拦截URL跳转的页面 -->
             </list>  
         </property>  
		<property name="authenticationManager" ref="authenticationManager" /><!-- 
			登陆的认证 -->
		<property name="accessDecisionManager" ref="myAccessDecisionManagerBean" /><!-- 
			资源访问决策 -->
		<property name="securityMetadataSource" ref="securityMetadataSource" /><!-- 
			资源和权限列表 -->
	</bean>
	
	<!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
	<bean id="myAccessDecisionManagerBean"
		class="cn.com.educate.app.service.security.MyAccessDecisionManager" />

	<!-- 资源源数据定义，即定义某一资源可以被哪些角色访问 -->
	<bean id="securityMetadataSource"
		class="cn.com.educate.app.service.security.MyInvocationSecurityMetadataSource">
		<constructor-arg name="dbSecurityInfo" ref="dbSecurityInfo" />
	</bean>

</beans>